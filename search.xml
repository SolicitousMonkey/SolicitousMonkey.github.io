<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>奇奇怪怪的碎碎念</title>
      <link href="/2023/11/01/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2023/11/01/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1>2023年11月份的碎碎念</h1><h2 id="11月的第一个星期">11月的第一个星期</h2><p>emotion：😭😭😭😭😭</p><p>🎸起因：新裤子北海怪兽演唱，本来没打算抢票的我，总觉得都开到家门口了，不抢怪可惜的。</p><blockquote><p>起初不打算抢票的原因：</p><ol><li>感觉新裤子越来越流行化了，觉得朋克太土了。</li><li>总觉得开演唱会太不像摇滚乐做的事儿了，摇滚乐就应该好好呆在livehouse，</li></ol><p>改变心意的原因：</p><ol><li>前一天晚上看了月夏最后一集的演唱会，朋克虽然土，但真的好容易让人回荡起被琐碎日子磨平的情绪，不用思考，没有晦涩的歌词，没有刻意制造的深刻，没有对社会的苦大仇深与抨击。我在这总是能感到裸露的情绪，为自己还能感受世界而庆幸。</li><li>第二个原因就是距离真的太近了，离学校只有不到2km的距离。</li></ol></blockquote><p>🌸经过：下午四点突然收到新裤子演唱会放票的信息，点进去一看发现280、580、780、980的票都有，我当机立断就想起前一天晚上想到如果有票的话叫上FL哥，但是之前根本没录入他们的个人身份信息，买票的时候就需要重新录入，一通下来本来可以抢到280票的我，硬生生因为录入他们的信息花了太多时间，错过280的票。此时已经很冲动了，想要去看演唱会的心情达到峰值，简单询问了一下就买了580的票乘4！！！！</p><p>🌰结果：太贵了！！太亏了！！还不能退票！！退票要收20%的手续费！！搞的FL哥和章鱼哥莫名支出了一大笔钱，关键是原本是不想看的，就算想看也是最便宜的票，一下子就比原计划多花了三百块！！！而且其实大家都互相不认识，感觉会尴尬。</p><p>而且FL哥感觉没有很想去，这波是擅自给别人做决定了，本来是打算买280的票然后就请他看的，因为冲动买票的行为导致也请不起了。</p><p>😭 导致：emo了一下午，觉得自己做事情太冲动太冲动，太不成熟，以此为鉴，得出一些结论，希望以后能减少此类事情的发生：</p><p>🌏心得：</p><ol><li><strong>提前确定好买票人，不要临时更改</strong>。如果有临时想叫的人，先管好已经定下来的，再去问别人。</li><li>提前录入买票人信息和取票地址。</li><li>不一定要一起买，不用为了连座特地一起买票，<strong>没有抢到票一切都是徒劳的</strong>。</li><li>只买最便宜一档的票！没有了就不买！因为总会等到有人出的！！</li><li>面对突如其来的票，先管自己的，再去管别人的，不带来不必要的麻烦。</li></ol><p>将该抢票心得映射到其他的事情上：</p><ol><li>不要在心急的时候做决定！不要被突如其来的计划改变乱了阵脚！如果实在计划有变，考虑此事事关自己还是事关他人，</li><li><strong>如若事关他人</strong>，则不要轻易改变计划，别人不一定能接受突然的改变，并且计划的改变通常以为着要付出代价，别人不一定能够接受这样的代价。</li><li><strong>如果事关自己</strong>，可以争取改变，毕竟自己能够承担自己做的事情带来的代价。</li></ol><p>这次就算了，好好享受这一场演唱会，想太多也没有用，期待演出捏</p><p><img src="image-20231101210351116.png" alt="image-20231101210351116"></p><p>最后附上新裤子的一首歌，歌名与今日感受十分贴切，🎧   ----&gt;  <a href="https://music.163.com/#/song?id=2033879001">荒废的一天</a></p><p>END/</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 本人的碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>驱动开发入门</title>
      <link href="/2023/10/26/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
      <url>/2023/10/26/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="编写驱动步骤">编写驱动步骤</h2><ol><li>确定主设备号</li><li>定义自己的<code>file_operator</code>结构体</li><li>实现对应的<code>open\read\write</code>等函数，填入<code>file_operator</code>结构体</li><li>把<code>file_operator</code>结构体告诉内核：注册驱动程序</li><li>入口函数：安装驱动程序时就会调用该入口函数</li><li>出口函数：卸载驱动程序时，就会调用该出口函数</li><li>其他完善：提供设备信息，自动创建设备节点</li></ol><h2 id="编写一个简单的hello驱动（不涉及硬件）">编写一个简单的hello驱动（不涉及硬件）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/major.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seq_file.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/tty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kmod.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/gfp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 确定主设备号 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> major = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> kernel_buf[<span class="number">1024</span>];</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">hello_class</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a, b)   (a&lt;b?a : b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 实现对应的open、read、write函数，填入file_operation结构体 */</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">hello_drv_read</span> <span class="params">(<span class="keyword">struct</span> file *file, <span class="type">char</span> __user *buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;%s %s line %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">    copy_to_user(buf, kernel_buf, MIN(<span class="number">1024</span>, size));</span><br><span class="line">    <span class="keyword">return</span> MIN(<span class="number">1024</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">hello_drv_write</span> <span class="params">(<span class="keyword">struct</span> file *file, <span class="type">const</span> <span class="type">char</span> __user *buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;%s %s line %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">    copy_from_user(kernel_buf, buf, MIN(<span class="number">1024</span>, size));</span><br><span class="line">    <span class="keyword">return</span> MIN(<span class="number">1024</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hello_drv_open</span> <span class="params">(<span class="keyword">struct</span> inode *node, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;%s %s line %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hello_drv_close</span> <span class="params">(<span class="keyword">struct</span> inode *node, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;%s %s line %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 定义自己的file_operation结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operation</span> <span class="title">hello_drv</span> =</span> &#123;</span><br><span class="line">    .owner  = THIS_MODULW,</span><br><span class="line">    .open   = hello_drv_open,</span><br><span class="line">    .read   = hello_drv_read,</span><br><span class="line">    .write  = hello_drv_write,</span><br><span class="line">    .release = hello_drv_close,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 注册驱动程序，把file_operation结构体告诉内核 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5. 入口函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">hello_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line">    printk(<span class="string">&quot;%s %s line %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"></span><br><span class="line">    major = register_chrdev(<span class="number">0</span>, <span class="string">&quot;hello&quot;</span>, &amp;hello_drv); </span><br><span class="line"></span><br><span class="line">    hello_class = class_create(THIS_MODULE, <span class="string">&quot;hello_class&quot;</span>); <span class="comment">/* /dev/hello */</span></span><br><span class="line">err = PTR_ERR(hello_class);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(hello_class))</span><br><span class="line">&#123;</span><br><span class="line">        printk(<span class="string">&quot;%s %s line %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">        unregister_chrdev(major, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    device_create(hello_class, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6. 出口函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">hello_exit</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;%s %s line %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">    device_destory(hello_class, MKDEV(major, <span class="number">0</span>));</span><br><span class="line">    class_destory(hello_class);</span><br><span class="line"></span><br><span class="line">    unregister_chrdev(major, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 7. 其他完善：提供设备信息，自动创建节点 */</span></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>__FILE__</code> 是预处理器宏，用于表示当前源文件名。</li><li><code>__FUNCTION__</code> 是编译器宏，用于表示当前函数名。</li><li><code>__LINE__</code> 是预处理器宏，用于表示当前行号。</li></ul><p>这些宏常用于调试，以了解代码的执行位置。</p><ul><li><code>printk</code> 是Linux内核中用于打印调试信息的函数，类似于C标准库中的 <code>printf</code>。</li></ul><hr><h3 id="两种三极管">两种三极管</h3><p>N是负极</p><p><img src="image-20231027162836427.png" alt="三极管"></p><hr><h3 id="GPIO">GPIO</h3><p><strong>四个步骤</strong>:</p><ol><li>使能 power/clock</li><li>pin’mode可以是uart或gpio等等，因此要选择pin’mode</li><li>方向：读 or 写</li><li>数据：高电平 or 低电平</li></ol><p><img src="image-20231027163401069.png" alt="GPIO"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
